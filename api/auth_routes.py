# /api/auth_routes.py

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import Session
from db.database import get_db
from models.models import User
from schemas.schemas import UserCreate, UserResponse
from core.auth import hash_password, verify_password, create_access_token, create_refresh_token
from sqlalchemy.future import select  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º select
from core.logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä

router = APIRouter()


# üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
@router.post("/auth/register", response_model=UserResponse)
async def register_user(user: UserCreate, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(User).filter(User.email == user.email))
    existing_user = result.scalars().first()

    if existing_user:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email: {user.email}")
        raise HTTPException(status_code=400, detail="Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    hashed_password = hash_password(user.password)
    new_user = User(username=user.username, email=user.email, password_hash=hashed_password)
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)

    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.email}")
    return new_user


# üîπ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤ (—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
@router.post("/auth/login")
async def login_user(user: UserCreate, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(User).filter(User.email == user.email))
    db_user = result.scalars().first()

    if not db_user or not verify_password(user.password, db_user.password_hash):
        logger.warning(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å ({user.email})")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    access_token = create_access_token({"sub": db_user.email})
    refresh_token = create_refresh_token({"sub": db_user.email})

    db_user.refresh_token = refresh_token
    await db.commit()
    await db.refresh(db_user)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª: {user.email}")
    return {"access_token": access_token, "refresh_token": refresh_token, "token_type": "bearer"}


# üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `access_token` –ø–æ `refresh_token`
@router.post("/auth/refresh")
async def refresh_access_token(refresh_token: str, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(User).filter(User.refresh_token == refresh_token))
    db_user = result.scalars().first()

    if not db_user:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π `refresh_token`")

    # üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π `access_token`
    new_access_token = create_access_token({"sub": db_user.email})

    return {"access_token": new_access_token, "token_type": "bearer"}
