# /api/routes.py

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import Session
from db.database import get_db
from models.models import User, Snippet
from schemas.schemas import UserCreate, UserResponse, SnippetCreate, SnippetResponse
from core.auth import get_current_user  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É JWT
from sqlalchemy.future import select  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º select
from core.logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
from core.websocket_manager import active_connections  # ‚úÖ WebSockets –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
from datetime import datetime  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç datetime
from typing import List, Optional
from fastapi import Query


router = APIRouter()


@router.post("/snippets/", response_model=SnippetResponse)
async def create_snippet(snippet: SnippetCreate, db: AsyncSession = Depends(get_db), current_user: User = Depends(get_current_user)):
    new_snippet = Snippet(**snippet.dict(), owner_id=current_user.id)
    db.add(new_snippet)
    await db.commit()
    await db.refresh(new_snippet)

    logger.info(f"–°–Ω–∏–ø–ø–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.email}: {new_snippet.title}")
    return new_snippet


# üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥-—Å–Ω–∏–ø–ø–µ—Ç–∞ (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ UUID)
@router.put("/snippets/{snippet_uuid}", response_model=SnippetResponse)
async def update_snippet(
    snippet_uuid: str,  # üîπ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º UUID –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    updated_snippet: SnippetCreate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    result = await db.execute(select(Snippet).filter(Snippet.uuid == snippet_uuid))  # üîπ –§–∏–ª—å—Ç—Ä –ø–æ UUID
    snippet = result.scalars().first()

    if not snippet:
        raise HTTPException(status_code=404, detail="–°–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if snippet.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    snippet.title = updated_snippet.title
    snippet.description = updated_snippet.description
    snippet.code = updated_snippet.code
    snippet.language = updated_snippet.language
    snippet.updated_at = datetime.utcnow()

    await db.commit()
    await db.refresh(snippet)

    # üîπ –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ —Å–Ω–∏–ø–ø–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω
    if snippet.owner_id in active_connections:
        for connection in active_connections[snippet.owner_id]:
            await connection.send_text(f"–í–∞—à —Å–Ω–∏–ø–ø–µ—Ç '{snippet.title}' –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω!")

    logger.info(f"–°–Ω–∏–ø–ø–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.email}: {snippet.title}")
    return snippet


# üìå –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥-—Å–Ω–∏–ø–ø–µ—Ç–∞ (–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ UUID)
@router.delete("/snippets/{snippet_uuid}")
async def delete_snippet(
    snippet_uuid: str,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥-—Å–Ω–∏–ø–ø–µ—Ç–∞ –ø–æ UUID.
    –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π —Å–Ω–∏–ø–ø–µ—Ç.
    """
    result = await db.execute(select(Snippet).filter(Snippet.uuid == snippet_uuid))
    snippet = result.scalars().first()

    if not snippet:
        raise HTTPException(status_code=404, detail="–°–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if snippet.owner_id != current_user.id:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    await db.delete(snippet)  # üîπ –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω await ‚Üí –æ–±—ä–µ–∫—Ç —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –±–∞–∑—ã
    await db.commit()

    # üîπ –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ —Å–Ω–∏–ø–ø–µ—Ç —É–¥–∞–ª—ë–Ω
    if snippet.owner_id in active_connections:
        for connection in active_connections[snippet.owner_id]:
            await connection.send_text(f"–í–∞—à —Å–Ω–∏–ø–ø–µ—Ç '{snippet.title}' –±—ã–ª —É–¥–∞–ª—ë–Ω!")

    logger.info(f"–°–Ω–∏–ø–ø–µ—Ç —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.email}: {snippet.title}")
    return {"message": "–°–Ω–∏–ø–ø–µ—Ç —É–¥–∞–ª—ë–Ω"}


# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–ø–ø–µ—Ç–∞ –ø–æ UUID (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
@router.get("/snippets/uuid/{snippet_uuid}", response_model=SnippetResponse)
async def get_snippet_by_uuid(snippet_uuid: str, db: AsyncSession = Depends(get_db)):
    """
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥-—Å–Ω–∏–ø–ø–µ—Ç –ø–æ UUID.
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    result = await db.execute(select(Snippet).filter(Snippet.uuid == snippet_uuid))  # –ü–æ–∏—Å–∫ –ø–æ UUID
    snippet = result.scalars().first()

    if not snippet:
        raise HTTPException(status_code=404, detail="–°–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")  # –ï—Å–ª–∏ —Å–Ω–∏–ø–ø–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404

    return snippet  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–Ω–∏–ø–ø–µ—Ç



@router.get("/snippets/", response_model=List[SnippetResponse])
async def get_snippets(
    db: AsyncSession = Depends(get_db),
    language: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É"),
    owner_id: Optional[int] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É")
):
    query = select(Snippet)

    if language:
        query = query.filter(Snippet.language == language)  # üîπ –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É
    if owner_id:
        query = query.filter(Snippet.owner_id == owner_id)  # üîπ –§–∏–ª—å—Ç—Ä –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É

    result = await db.execute(query)
    snippets = result.scalars().all()
    return snippets


# –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
# ‚úÖ –í–º–µ—Å—Ç–æ snippet_id: int —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è snippet_uuid: str.
# ‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –ë–î –∏—Å–ø–æ–ª—å–∑—É—é—Ç Snippet.uuid, –∞ –Ω–µ Snippet.id.
# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω await db.delete(snippet), —á—Ç–æ–±—ã —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
# ‚úÖ –í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.