# /snippet_api/main.py

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.security import OAuth2PasswordBearer
from fastapi.openapi.utils import get_openapi
from api.routes import router
from api.auth_routes import router as auth_router
from core.logger import logger  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
from collections import defaultdict
from core.websocket_manager import connect, disconnect  # ‚úÖ –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç


# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OAuth2 —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

# üîπ –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI(
    title="Snippet API",
    description="API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥-—Å–Ω–∏–ø–ø–µ—Ç–∞–º–∏",
    version="1.0",
    swagger_ui_oauth2_redirect_url="/docs/oauth2-redirect",
    openapi_url="/openapi.json",
    docs_url="/docs"
)


# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è OpenAPI-—Å—Ö–µ–º—ã
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )
    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
        }
    }
    for path in openapi_schema["paths"].values():
        for method in path.values():
            method["security"] = [{"BearerAuth": []}]
    app.openapi_schema = openapi_schema
    return app.openapi_schema


# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é OpenAPI-—Å—Ö–µ–º—É
app.openapi = custom_openapi

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã API
app.include_router(router)
app.include_router(auth_router)

# üìå –•—Ä–∞–Ω–∏–º WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
active_connections = defaultdict(list)  # user_id -> list of WebSockets

# üìå WebSocket –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤
@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: int):
    await connect(user_id, websocket)  # ‚úÖ –¢–µ–ø–µ—Ä—å WebSockets —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ
    try:
        while True:
            await websocket.receive_text()
    except WebSocketDisconnect:
        await disconnect(user_id, websocket)  # ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    logger.info(f"WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: user_id={user_id}")

    try:
        while True:
            await websocket.receive_text()  # –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–æ –º—ã —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
    except WebSocketDisconnect:
        active_connections[user_id].remove(websocket)
        logger.info(f"WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: user_id={user_id}")

# üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Uvicorn
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
