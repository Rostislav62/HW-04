# /schemas/schemas.py

from pydantic import BaseModel, EmailStr
from datetime import datetime
from typing import Optional


# üìå –°—Ö–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str


# üìå –°—Ö–µ–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
class UserResponse(BaseModel):
    id: int
    username: str
    email: EmailStr
    created_at: datetime

    class Config:
        from_attributes = True  # –ü–æ–∑–≤–æ–ª—è–µ—Ç Pydantic –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å SQLAlchemy


# üìå –°—Ö–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥-—Å–Ω–∏–ø–ø–µ—Ç–∞
class SnippetCreate(BaseModel):
    title: str
    description: Optional[str] = None
    code: str
    language: str


# üìå –°—Ö–µ–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥-—Å–Ω–∏–ø–ø–µ—Ç–∞
class SnippetResponse(BaseModel):
    uuid: str  # üîπ –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ UUID
    title: str
    description: Optional[str]
    code: str
    language: str
    created_at: datetime
    updated_at: datetime
    owner_id: int

